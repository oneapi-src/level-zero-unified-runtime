#
# Copyright (C) 2021 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Unified Rutime APIs"
ordinal: "4"
--- #--------------------------------------------------------------------------
type: enum
desc: "USM memory property flags"
class: $xUSM
name: $x_usm_mem_flags_t
etors:
    - name: BIAS_CACHED
      value: "$X_BIT(0)"
      desc: "Allocation should be cached"
    - name: BIAS_UNCACHED
      value: "$X_BIT(1)"
      desc: "Allocation should not be cached"
    - name: WRITE_COMBINED
      value: "$X_BIT(2)"
      desc: "Memory should be allocated write-combined (WC)"
    - name: INITIAL_PLACEMENT_DEVICE
      value: "$X_BIT(3)"
      desc: "Optimize shared allocation for first access on the device"
    - name: INITIAL_PLACEMENT_HOST
      value: "$X_BIT(4)"
      desc: "Optimize shared allocation for first access on the host"
    - name: DEVICE_READ_ONLY
      value: "$X_BIT(5)"
      desc: "Memory is only possibly modified from the host, but read-only in all device code"
--- #--------------------------------------------------------------------------
type: enum
desc: "USM memory property flags"
class: $xUSM
name: $x_usm_pool_flags_t
etors:
    - name: ZERO_INITIALIZE_BLOCK
      value: "$X_BIT(0)"
      desc: "All coarse-grain allocations (allocations from the driver) will be zero-initialized."
--- #--------------------------------------------------------------------------
type: enum
desc: "USM allocation type"
class: $xUSM
name: $x_usm_type_t
etors:
    - name: UNKOWN
      desc: "Unkown USM type"
    - name: HOST
      desc: "Host USM type"
    - name: DEVICE
      desc: "Device USM type"
    - name: SHARED
      desc: "Shared USM type"
--- #--------------------------------------------------------------------------
type: enum
desc: "USM memory allocation information type"
class: $xUSM
name: $x_usm_alloc_info_t
etors:
    - name: TYPE
      desc: "Memory allocation type info"
    - name: BASE_PTR
      desc: "Memory allocation base pointer info"
    - name: SIZE
      desc: "Memory allocation size info"
    - name: DEVICE
      desc: "Memory allocation device info"
--- #--------------------------------------------------------------------------
type: enum
desc: "USM memory advice"
class: $xUSM
name: $x_mem_advice_t
etors:
    - name: DEFAULT
      desc: "The USM memory advice is default"
    - name: SET_READ_MOSTLY
      desc: "Hint that memory will be read from frequently and written to rarely"
    - name: CLEAR_READ_MOSTLY
      desc: "Removes the affect of ::$X_MEM_ADVICE_SET_READ_MOSTLY"
    - name: SET_PREFERRED_LOCATION
      desc: "Hint that the preferred memory location is the specified device"
    - name: CLEAR_PREFERRED_LOCATION
      desc: "Removes the affect of ::$X_MEM_ADVICE_SET_PREFERRED_LOCATION"
    - name: SET_NON_ATOMIC_MOSTLY
      desc: "Hints that memory will mostly be accessed non-atomically"
    - name: CLEAR_NON_ATOMIC_MOSTLY
      desc: "Removes the affect of ::$X_MEM_ADVICE_SET_NON_ATOMIC_MOSTLY"
    - name: BIAS_CACHED
      desc: "Hints that memory should be cached"
    - name: BIAS_UNCACHED
      desc: "Hints that memory should be not be cached"
--- #--------------------------------------------------------------------------
type: handle
desc: "Handle of USM pool"
class: $xUSM
name: "$x_usm_pool_handle_t"
--- #--------------------------------------------------------------------------
type: struct
desc: "USM allocation descriptor type"
class: $xUSM
name: $x_usm_desc_t
base: $x_base_desc_t
members:
    - type: $x_usm_mem_flags_t
      name:  flags
      desc: "[in] memory allocation flags"
    - type: $x_mem_advice_t
      name: hints
      desc: "[in] Memory advice hints"
--- #--------------------------------------------------------------------------
type: struct
desc: "USM pool descriptor type"
class: $xUSM
name: $x_usm_pool_desc_t
base: $x_base_desc_t
members:
    - type: $x_usm_pool_flags_t
      name:  flags
      desc: "[in] memory allocation flags"
--- #--------------------------------------------------------------------------
type: struct
desc: "USM pool limits descriptor type"
class: $xUSM
name: $x_usm_pool_limits_desc_t
base: $x_base_desc_t
members:
    - type: "size_t"
      name:  maxPoolSize
      desc: "[in] Maximum size of a memory pool"
    - type: "size_t"
      name:  maxPoolableSize
      desc: "[in] Allocations up to this limit will be subject to pooling"
    - type: "size_t"
      name:  capacity
      desc: "[in] When pooling, each bucket will hold a max of 4 unfreed slabs"
    - type: "size_t"
      name:  slabMinSize
      desc: "[in] Minimum allocation size that will be requested from the driver"
--- #--------------------------------------------------------------------------
type: function
desc: "USM allocate host memory"
class: $xUSM
name: HostAlloc
ordinal: "0"
details:
  - "This function must support memory pooling."
  - "If pUSMDesc is not NULL and pUSMDesc->pool is not NULL the allocation will be served from a specified memory pool."
  - "Otherwise, the behavior is implementation-defined."
  - "Allocations served from different memory pools must be isolated and must not reside on the same page."
  - "Any flags/hints passed through pUSMDesc only affect the single allocation."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_usm_desc_t*
      name: pUSMDesc
      desc: "[in][optional] USM memory allocation descriptor"
    - type: $x_usm_pool_handle_t
      name: pool
      desc: "[in][optional] Pointer to a pool created using urUSMPoolCreate"
    - type: "size_t"
      name: size
      desc: "[in] size in bytes of the USM memory object to be allocated"
    - type: uint32_t
      name: align      
      desc: |
            [in] alignment of the USM memory object
            Must be zero or a power of 2.
            Must be equal to or smaller than the size of the largest data type supported by `hDevice`.
    - type: void**
      name: ppMem
      desc: "[out] pointer to USM host memory object"
returns:      
    - $X_RESULT_ERROR_INVALID_CONTEXT
    - $X_RESULT_ERROR_INVALID_OPERATION:
      - "If $X_DEVICE_INFO_USM_HOST_SUPPORT is false."    
    - $X_RESULT_ERROR_INVALID_VALUE:
      - "`align != 0 && ((align & (align-1)) != 0)`" # alignment must be power of two
      - "If `align` is greater that the size of the largest data type supported by `hDevice`."
    - $X_RESULT_ERROR_INVALID_USM_SIZE:
      - "`size == 0`"
      - "`size` is greater than $X_DEVICE_INFO_MAX_MEM_ALLOC_SIZE."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
id: 111
--- #--------------------------------------------------------------------------
type: function
desc: "USM allocate device memory"
class: $xUSM
name: DeviceAlloc
ordinal: "0"
details:
  - "This function must support memory pooling."
  - "If pUSMDesc is not NULL and pUSMDesc->pool is not NULL the allocation will be served from a specified memory pool."
  - "Otherwise, the behavior is implementation-defined."
  - "Allocations served from different memory pools must be isolated and must not reside on the same page."
  - "Any flags/hints passed through pUSMDesc only affect the single allocation."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: $x_usm_desc_t*
      name: pUSMDesc
      desc: "[in][optional] USM memory allocation descriptor"
    - type: $x_usm_pool_handle_t
      name: pool
      desc: "[in][optional] Pointer to a pool created using urUSMPoolCreate"
    - type: "size_t"
      name: size
      desc: "[in] size in bytes of the USM memory object to be allocated"
    - type: uint32_t
      name: align      
      desc: |
            [in] alignment of the USM memory object
            Must be zero or a power of 2.
            Must be equal to or smaller than the size of the largest data type supported by `hDevice`.
    - type: void**
      name: ppMem
      desc: "[out] pointer to USM device memory object"
returns:      
    - $X_RESULT_ERROR_INVALID_CONTEXT
    - $X_RESULT_ERROR_INVALID_OPERATION:
      - "If $X_DEVICE_INFO_USM_HOST_SUPPORT is false."
    - $X_RESULT_ERROR_INVALID_VALUE:
      - "`align != 0 && ((align & (align-1)) != 0)`" # alignment must be power of two
      - "If `align` is greater that the size of the largest data type supported by `hDevice`."
    - $X_RESULT_ERROR_INVALID_USM_SIZE:
      - "`size == 0`"
      - "`size` is greater than $X_DEVICE_INFO_MAX_MEM_ALLOC_SIZE."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
id: 112
--- #--------------------------------------------------------------------------
type: function
desc: "USM allocate shared memory"
class: $xUSM
name: SharedAlloc
ordinal: "0"
details:
  - "This function must support memory pooling."
  - "If pUSMDesc is not NULL and pUSMDesc->pool is not NULL the allocation will be served from a specified memory pool."
  - "Otherwise, the behavior is implementation-defined."
  - "Allocations served from different memory pools must be isolated and must not reside on the same page."
  - "Any flags/hints passed through pUSMDesc only affect the single allocation."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: $x_usm_desc_t*
      name: pUSMDesc
      desc: "[in][optional] USM memory allocation descriptor"
    - type: $x_usm_pool_handle_t
      name: pool
      desc: "[in][optional] Pointer to a pool created using urUSMPoolCreate"
    - type: "size_t"
      name: size
      desc: "[in] size in bytes of the USM memory object to be allocated"
    - type: uint32_t
      name: align      
      desc: |
            [in] alignment of the USM memory object.
            Must be zero or a power of 2.
            Must be equal to or smaller than the size of the largest data type supported by `hDevice`.
    - type: void**
      name: ppMem
      desc: "[out] pointer to USM shared memory object"
returns:      
    - $X_RESULT_ERROR_INVALID_CONTEXT
    - $X_RESULT_ERROR_INVALID_VALUE:
      - "`align != 0 && ((align & (align-1)) != 0)`" # alignment must be power of two
      - "If `align` is greater that the size of the largest data type supported by `hDevice`."
    - $X_RESULT_ERROR_INVALID_USM_SIZE:
      - "`size == 0`"
      - "`size` is greater than $X_DEVICE_INFO_MAX_MEM_ALLOC_SIZE."
    - $X_RESULT_ERROR_INVALID_OPERATION:
      - "If `UR_DEVICE_INFO_USM_SINGLE_SHARED_SUPPORT` and `UR_DEVICE_INFO_USM_CROSS_SHARED_SUPPORT` are both false."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
id: 113
--- #--------------------------------------------------------------------------
type: function
desc: "Free the USM memory object"
class: $xUSM
name: Free
ordinal: "0"
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: void*
      name: pMem
      desc: "[in] pointer to USM memory object"
returns:
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
id: 114
--- #--------------------------------------------------------------------------
type: function
desc: "Get USM memory object allocation information"
class: $xUSM
name: GetMemAllocInfo
ordinal: "0"
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: pMem
      desc: "[in] pointer to USM memory object"
    - type: $x_usm_alloc_info_t
      name: propName
      desc: "[in] the name of the USM allocation property to query"
    - type: size_t
      name: propValueSize
      desc: "[in] size in bytes of the USM allocation property value"
    - type: void*
      name: pPropValue
      desc: "[out][optional] value of the USM allocation property"
    - type: size_t*
      name: pPropValueSizeRet
      desc: "[out][optional] bytes returned in USM allocation property"
returns:
    - $X_RESULT_ERROR_INVALID_CONTEXT
    - $X_RESULT_ERROR_INVALID_VALUE
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
id: 115
--- #--------------------------------------------------------------------------
type: function
desc: "Create USM memory pool with desired properties."
class: $xUSM
name: PoolCreate
ordinal: "0"
details:
  - "UR can create multiple instances of the pool depending on allocation requests."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_usm_pool_desc_t*
      name: pPoolDesc
      desc: "[in] pointer to USM pool descriptor. Can be chained with $x_usm_pool_limits_desc_t"
    - type: $x_usm_pool_handle_t*
      name: ppPool
      desc: "[out] pointer to USM memory pool"
returns:
    - $X_RESULT_ERROR_INVALID_VALUE
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
id: 116
--- #--------------------------------------------------------------------------
type: function
desc: "Destroy USM memory pool"
class: $xUSM
name: PoolDestroy
ordinal: "0"
details:
    - "All allocation belonging to the pool should be freed before calling this function."
    - "This functions returns all memory reserved by the pool to the driver."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_usm_pool_handle_t
      name: pPool
      desc: "[in] pointer to USM memory pool"
returns:
    - $X_RESULT_ERROR_INVALID_VALUE
id: 117
